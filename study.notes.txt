/* Study notes. */


__** What is Typescript? **__
Typescript = open source, typed superset of JavaScript by Microsoft. Compiles down to plain Javascript. TypeScript is just extended JavaScript. You can rename a .js file to a .ts file and it will work just fine. TypeScript adds type support to JavaScript. With TypeScript we get IDE / intellesense support also. 

<> is the casting operator in typescript.

TypeScript, unlike traditional JavaScript, encourages let & const declarations. JavaScript only has global scope and function scope, there is no block level scope. Let & Const declarations support block level scoping, and you can't re-declare a variable multiple times. Const variables must be initialized, where as Let can just be declared. Let variables often change, where Const varialbes are consistent and don't change. 
You can also utilize the 'any' type to assign different variable types (if you're unsure of what type value to use). Any encompasses any type value in TypeScript and doesn't throw any errors on any value declaration. 
Type Unknown is similar to the Any type, except that when it gets declared, you need to use type assertion to treat it as a certain type, before applying methods to it.
Declaring Types is also optional, but TypeScript infers the type of variable if you declare it and initialize it inline. 

You can declare multi types, using the | character. This is different from the Any type, as it restricts the types you can assign. 

In TypeScript you can assign Types as function parameters. You can have Optional parameters, or Default parameters. You can make parameters optional by using the ? character after the parameter. You can have any number of Optional parameters, but they must be declared after the required parameters. Default parameters just have a set value as a parameter. 

It is possible to specify an object as a Type in TypeScript. We can create interfaces to use as a type, also with optional properties. An interface is a way to declare a contract for the shape of a type, with 'shape' in this sense being a collection of methods and properties along with their associated types. Creating an object of the type defined by the interface it is expected that the object has the same 'shape' - or you'll get a TypeScript error (or 700).

In plain JavaScript there is no concept of Classes and inheritence is through prototypical inheritance. TypeScript, just like ES6, supports Classes to build object orientated class based approach. You can create new instances of instansiated classes, like you can in C#. You can also now have class based inheritance. Use the extends keyword to extend from another class, and then use the super keyword to utilize that extended classes properties. 

Access Modifiers are basically keywords that set the accessibility of methods and properties within classes - Public, Private and Protected. By default all members are Public.

Using TypeScript with Redux provides the following benefits for your application:
- Type safety for reducers, state and action creators
- Easy refactoring of typed code

__** ES6 notes: **__
Class Declarations are just "special functions" - it has two components: class expressions and class declarations. 

Hoisting. An important difference between function declarations and class declarations is that function declarations are "hoisted" and class declarations are not. It means that you will need to declare your classes before you access them. Hoisting was thought up as a feneral way of thinking about how execution contexts work in JavaScript. 


__** REACT **__

Components are like JavaScript functions. They accept inputs (called 'props') and then return React elements, describing what should appear on screen. You can use classes (ES6) which have some addition features. Component names always start with a capital letter.

Stateless / Functional React Components (Dumb components).
These are plain Javascript funtion that takes props as arguments and returns a react element. They do not retain internal state, or have backing instances, and don't have the component lifecycle methods. They can't remember or give context to other parts of the UI. When possible, stateless components are preferred.

Props are creation parameters for React Componenets. I.E: When you create an image, you can use a prop named source to control what image it shows. 

Class component or Stateful Components
Components which manage / modify state. A Stateful component in React is a component carrying it's own local state. You can change the state using this.setState. Stateful components provide the necessary context glue. Plays with all life cycle methods of React.

Container / Presentational principle
This is a pattern for React components. The container component is the one that carries all the logic: functions for holding state changes, internal component state, etc. 

In contrast a presentational component is merely used for displaying the intended markup. These are plain JS functions, recieving data from the container component as props. 

React expects components to start with uppercase and DOM elements to start with lowercase.

The parent component is usually in control of changing the value of props passed into child elements.

In JavaScript, the keyword 'this' is bound to a function, as opposed to strongly-typed languages such as C#. In C# 'this' is bound to an object instance, whereas in JavaScript it's bound to the function in which it is called in. 

In html forms, an input form element whose value is controlled by React (in the state property of the component, and updated with setState() ), is called a "Controlled component"

Unidirectional Data Flow (UDF):
	event -> event handler -> state -> render
Components are representations of the state of a view over time. As events are triggered over time, they update state and re-render the component with the new state. The flow can be seen as a stream of events that have unidirectional data flow, and eventually cause a component to re-render. 
The actual composition of the components occurs in the render method.

Even when using Redux, it's totally fine to have Stateful Components. Not every piece of an application's state should go inside Redux.


__ ** REDUX ** __
Redux is a state management library. It offers a lot of convenience for a JavaScript developer - debugging, action replaying, etc. Redux is not often useful for smaller apps, but it shines in bigger applciations. 

Redux stores state in it's 'Store' - the Redux store is fundamental: the state of the whole application lives inside the store. It orchestrates all the moving parts of Redux. 

The state in Redux comes from reducers. Reducers produce the state of the application. The state must be return entirely from reducers. The state lives as a single object within the Store. 

A Reducer is a JavaScript function that takes two parameters: the current state, and an action. A Reducer must be pure (a pure function is one that returns the exact same output for the given input). A Reducer is the most important concept in Redux, as Reducers produce the state of the applciation. The second principle of Redux says the only way to change the state is by sending a signal to the store. This signal is an "Action" - Dispatching an Action is the process of sending out a signal. The Reducer calculates the next State depending on the Action Type. It should return at least the initial State when no Action Type matches. When it does match, the Reducer calculates the next State and returns a new object. Reducers will grow as your app will become bigger - you can split a big reducer into separate functions and combine them with combineReducers.

Redux Actions are nothing mroe than JavaScript objects. Each Action needs a Type Property for describing how the state should change. It is best practice to wrap every action within a function. Such function is called an Action Creator. The Type Property is nothing more than a string, so the reducer will use that string to determine how to calculate the next state. Therefore, it's better to have Action Types declared as constants to avoid difficult to debug errors. As soon as the Store receives an actionot triggers a Reducer, which returns the next State.

There are two key points for avoiding mutation in Redux - using concat(), slice(), and ...spread for arrays. And using Object.assign() and ...spread for objects. 

The Redux store exposes a simple API for managing state. The most important methods are: 
- getState() for accessing the current state of the application. 
- dispatch() for dispatching an action
- subscribe() for listening on state changes

Use store.getState() in the dev tools to access the current State of the store. We listen for State updates with the .subscribe() method - this accepts a callback that will fire whenever an action is dispatched. Dispatching an Action means notifying the store that we want to change the State.

To change the state in Redux we need to dispatch an action. You do this by calling the .dispatch() method. 

Redux on it's own is Framework Agnostic. You can use it with Vanilla JS, with Angular, React, etc. 

Install react-redux (npm i react-redux --save-dev) and the relative @type, as it is a Redux binding for React. It's a small library connecting the two in an efficient way. It connects a React component with the Redux store. The fundamental things to know are: 
- The mapStateToProps() function - this function connects a part of the Redux state to the props of a React component (just as it says it will).
- The mapDispatchToProps() function - this works for Actions. It connects Redux actions to React props, this was a connected React component will be able to dispatch actions. 

Provider is a high order component coming from the React-Redux library. It wraps up your application and makes it aware of the entire Redux's store. In Redux the Store manages everything, and React must talk to the Store for accessing the State and dispatching Actions. 

The key for connecting a React component with Redux is 'Connect' - this takes at least one argument (the first argument for connect must be null when mapStateToProps is absent, otherwise you'll get a TypeError: dispatch is not a function). Always remember the State in Redux comes from Reducers. Get into a habit of validating PropTypes with TypeScript. 

Redux Middleware. 
So far, we have the Store which orchestrates all the interactions in Redux. We also have the Reducer which is a producer (Reducers make the State in Redux). There are Actions, which are plain JS objects with a property named type. We also have Action Creaters which are plain JS functions that return Redux Actions. The State is immutable and can change, only in response to Actions. 

The main point of Redux is to move the logic out of the React components. If we want to check the Action Payload before the Action is passed to the Reducer, we need to check the Application's flow and alter its behaviour. That's what Redux Middleware does. 

The Payload is what is bundled in your actions and passed around between Reducers in your Redux applciation. 

A Redux Middleware is a function that is able to intercept, and act accordingly, our actions, before they reach the Reducer. In it's basic form, it is a function, returning a function, which takes next as a parameter. Then the inner functions returns another function which takes Action as a parameter and finally returns next(action). 

Middleware in Redux is super important. It holds the bulk of your applications logic. Inside Middleware you can access getState and dispatch. The logic can live outside of React, it becomes reusable, it can be tested, and we keep the components clean. 

You should always return next(action) in your middleware. If you forget to return next(action), then the application will stop and no other action will reach the reducer. 

For using Redux Dev Tools together with other middleware, you should use the below command, or import redux-devtools-extension
	const storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;

Asynchronour Actions in Redux
Dispatching an Action is synchronous. We return a plain object from our Action Creaters, and when the Action reaches the Reducer we return the next State. As Reducers should stay lean and clean, it is not a good place for Asynchronous logic. We cannot call fetch from within an action creator in Redux. This is because Redux is expecting objects as Actions but we're trying to return a Promise. This is where we use Redux-Thunk to overcome this problem and return Functions from Action Creators. Inside that function we can call API's, delay the Dispatch of an Action, etc. 

Redux-Thunk is a middleware for Redux. With thunk, you can return functions from Action Creators, not only Objects. You can do Async work inside your Actions and Dispatch other Actions in response to AJAX calls. 
	
To recap: REDUX does NOT understand other types of Action than a plain object. IF you want to move async logic from React to Redux and be able to return functions instead of plain objects then you have to use a custom middleware. 
	
REDUX Saga is middleware for managing Side-Effects and is an alternative to Redux-Thunk. The idea od Saga is that of having a separate thread in your application for dealing with 'impure' actions: API calls, storage access. It doesn't use regular JavaScript - the functions are called Sagas and are based on generator functions. A Generator function is a JavaScript function which can be paused and resumed during it's execution. Generator functions are denoted with an asterisk and make use of the yield keyword. I.E: 

function* generatorLoop() {
	for (var i = 0; i < 15; i++) {
		yield console.log(i);
	}
}

The above sample can't be run by simply calling generatorLoop();
For using the generator you must capture it in a variable, and then access the loop step after step with next();
I.E: 
myGenerator = generatorLoop();
myGenerator.next();
myGenerator.next();
	
Sp, Generator Functions in Javascript are functions which can be paused and resumed on demand. Redux Saga, handles the next() calls for you under it's hood. 
	
	

__** Webpack **__
Webpack is a static module bundler for JS applications. It's core concepts are 
- Entry: What webpack uses to start building out / resolving it's dependencies
- Output: Output property tells Webpack where to output the bundles it creates and how to name them
- Loaders: Loaders enable Webpack to process different types of imported files and convert them into valid modules when it encounters a specific type of file. Loaders have two properties in the config file - test & use. Test identifies which files should be transformed, and Use indicates which loader can be used to do transforming.
- Plugins

There are four features in Typescript that don't compile in Babel due to its single-file emit architecture

1. Don't use namespaces - they're outdated. Use ES6 modules (import / export) instead.
2. Casting a type with the <newtype>x syntax: use x as newtype instead. 
3. Const enums - resort to regular enums for now. 
4. Legecy style import / export syntax. I.E: import foo = require(..) and export = foo;


__** Babel **__
Babel is a toolchain that is mainly used to compile ECMAScript2015+ to a backwards compatible version of JavaScript in current and older browsers or environment. Babel can convert jsx to js


